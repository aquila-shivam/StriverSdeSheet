struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    
    bool static comparator( Job j1,Job j2)
    {
          return(j1.profit>j2.profit);
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<int>ans;
        sort(arr,arr+n,comparator);
        int maxi=arr[0].dead;
        for(int i=1;i<n;i++)
        {
            maxi=max(maxi,arr[i].dead);
        }
        int slot[maxi+1];
        for(int i=0;i<=maxi;i++)
        {
            slot[i]=-1;
        }
        int jobCount=0,profitCount=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=arr[i].dead;j>0;j--)
            {
                if(slot[j]==-1)
                {
                    slot[j]=i;
                    jobCount++;
                    profitCount+=arr[i].profit;
                    break;
                }
            }
        }
        ans.push_back(jobCount);
        ans.push_back(profitCount);
        return ans;
        
    } 
};