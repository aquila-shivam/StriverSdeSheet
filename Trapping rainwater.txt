Time complexity is O (N^2) and space complexity is O (1)

class Solution {
public:
    int trap(vector<int>& height) {
        int len=height.size();
        int waterTrapped=0;
        for(int i=0;i<len;i++)
        {
            int leftMax=0,rightMax=0,j;
            j=i;
            while(j>=0)
            {
                leftMax=max(leftMax,height[j]);
                j--;
            }
            j=i;
            while(j<len)
            {
                rightMax=max(rightMax,height[j]);
                j++;
            }
            
            waterTrapped+=min(leftMax,rightMax)-height[i];
            
        }
        return waterTrapped;
    }
};


Better Solution

Timecomplexity is O(N) and Space complexity is (2n)

int trap(vector<int>& height) {
        int len=height.size();
        int waterTrapped=0;
        int prefixMax[len];
        prefixMax[0]=height[0];
        for(int i=1;i<len;i++)
        {
            prefixMax[i]=max(prefixMax[i-1],height[i]);
        }
        int suffixMax[len];
        suffixMax[len-1]=height[len-1];
        for(int i=len-2;i>=0;i--)
        {
            suffixMax[i]=max(suffixMax[i+1],height[i]);
        }
        
        for(int i=0;i<len;i++)
        {
            waterTrapped+=min(prefixMax[i],suffixMax[i])-height[i];
        }
        return waterTrapped;
    }

Optimal approach

Timecomplexity is O(N) and Space complexity is O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int len=height.size();
        int waterTrapped=0;
        int l=0,r=len-1;
        int leftMax=0,rightMax=0;
        
        while(l<r)
        {
            if(height[l]<=height[r])
            {
                if(height[l]>leftMax)leftMax=height[l];
                else
                waterTrapped+=leftMax-height[l];
                l++;
            }
            else
            {
                if(height[r]>rightMax)rightMax=height[r];
                else
                    waterTrapped+=rightMax-height[r];
                r--;
            }
        }
        return waterTrapped;
    }
};
